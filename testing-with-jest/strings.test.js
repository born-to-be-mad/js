const utils = require("./strings");

describe("byteLength", () => {
  it("German(2 bytes per character)", () => {
    expect(utils.byteLength("√º√§√º√§√º√§√º√§√º√§")).toEqual(20);
    expect(utils.byteLength("√º√§,√º√§ √º√§")).toEqual(14);
  });

  it("3/4 bytes per character", () => {
    expect(utils.byteLength("‚§Ä‚¶Ä‚®Ä")).toEqual(9);
    expect(utils.byteLength("üòÄüòÄüòÄüòÄüòÄ")).toEqual(20);
    expect(utils.byteLength("üòÄüòÄ üòÄüòÄ,üòÄ!")).toEqual(23);
  });

  it("Chinese", () => {
    expect(utils.byteLength("‰Ω†Â•ΩÂêó")).toEqual(9);
    expect(utils.byteLength("Ë±°ÂΩ¢ËÆ∏ÊÖé")).toEqual(12);
  });

  it("Russian", () => {
    expect(utils.byteLength("–ü—Ä–∏–≤–µ—Ç")).toEqual(12);
    expect(utils.byteLength("–î–æ —Å–≤–∏–¥–∞–Ω—å—è")).toEqual(21);
  });
});

describe("byteLengthImproved", () => {
  it("German(2 bytes per character)", () => {
    expect(utils.byteLengthImproved("√º√§√º√§√º√§√º√§√º√§")).toEqual(20);
    expect(utils.byteLengthImproved("√º√§,√º√§ √º√§")).toEqual(14);
  });

  it("3/4 bytes per character", () => {
    expect(utils.byteLengthImproved("‚§Ä‚¶Ä‚®Ä")).toEqual(9);
    expect(utils.byteLengthImproved("üòÄüòÄüòÄüòÄüòÄ")).toEqual(20);
    expect(utils.byteLengthImproved("üòÄüòÄ üòÄüòÄ,üòÄ!")).toEqual(23);
  });

  it("Chinese", () => {
    expect(utils.byteLengthImproved("‰Ω†Â•ΩÂêó")).toEqual(9);
    expect(utils.byteLengthImproved("Ë±°ÂΩ¢ËÆ∏ÊÖé")).toEqual(12);
  });

  it("Russian", () => {
    expect(utils.byteLengthImproved("–ü—Ä–∏–≤–µ—Ç")).toEqual(12);
    expect(utils.byteLengthImproved("–î–æ —Å–≤–∏–¥–∞–Ω—å—è")).toEqual(21);
  });
});

describe("limitToByteLength", () => {
  it("quick return when length is big enough", () => {
    expect(utils.limitToByteLength("√º√§", 8)).toEqual("√º√§");
    expect(utils.limitToByteLength("Ë±°ÂΩ¢", 8)).toEqual("Ë±°ÂΩ¢");
    expect(utils.limitToByteLength("üòÄüòÄ", 16)).toEqual("üòÄüòÄ");
  });

  it("German(2 bytes per character)", () => {
    expect(utils.limitToByteLength("√º√§√º√§√º√§√º√§√º√§", 4)).toEqual("√º√§");
    expect(utils.limitToByteLength("√º√§√º√§√º√§√º√§√º√§", 5)).toEqual("√º√§");
    expect(utils.limitToByteLength("√º√§,√º√§", 5)).toEqual("√º√§,");
    expect(utils.limitToByteLength("√º√§,√º√§", 6)).toEqual("√º√§,");
    expect(utils.limitToByteLength("√º√§,√º√§", 7)).toEqual("√º√§,√º");
  });

  it("3/4 bytes per character", () => {
    expect(utils.limitToByteLength("üòÄüòÄüòÄüòÄüòÄ", 4)).toEqual("üòÄ");
    expect(utils.limitToByteLength("üòÄüòÄüòÄüòÄüòÄ", 5)).toEqual("üòÄ");
    expect(utils.limitToByteLength("üòÄüòÄüòÄüòÄüòÄ", 6)).toEqual("üòÄ");
    expect(utils.limitToByteLength("üòÄüòÄüòÄüòÄüòÄ", 7)).toEqual("üòÄ");
    expect(utils.limitToByteLength("üòÄüòÄüòÄüòÄüòÄ", 8)).toEqual("üòÄüòÄ");
    expect(utils.limitToByteLength("üòÄüòÄüòÄüòÄüòÄ", 9)).toEqual("üòÄüòÄ");
    expect(utils.limitToByteLength("üòÄüòÄüòÄüòÄüòÄ", 10)).toEqual("üòÄüòÄ");
    expect(utils.limitToByteLength("üòÄüòÄüòÄüòÄüòÄ", 11)).toEqual("üòÄüòÄ");
  });

  it("Chinese", () => {
    expect(utils.limitToByteLength("Ë±°ÂΩ¢ËÆ∏ÊÖé‰Ω†Â•ΩÂêó", 0)).toEqual("");
    expect(utils.limitToByteLength("Ë±°ÂΩ¢ËÆ∏ÊÖé‰Ω†Â•ΩÂêó", 1)).toEqual("");
    expect(utils.limitToByteLength("Ë±°ÂΩ¢ËÆ∏ÊÖé‰Ω†Â•ΩÂêó", 2)).toEqual("");
    expect(utils.limitToByteLength("Ë±°ÂΩ¢ËÆ∏ÊÖé‰Ω†Â•ΩÂêó", 3)).toEqual("Ë±°");
    expect(utils.limitToByteLength("Ë±°ÂΩ¢ËÆ∏ÊÖé‰Ω†Â•ΩÂêó", 4)).toEqual("Ë±°");
    expect(utils.limitToByteLength("Ë±°ÂΩ¢ËÆ∏ÊÖé‰Ω†Â•ΩÂêó", 5)).toEqual("Ë±°");
    expect(utils.limitToByteLength("Ë±°ÂΩ¢ËÆ∏ÊÖé‰Ω†Â•ΩÂêó", 6)).toEqual("Ë±°ÂΩ¢");
    expect(utils.limitToByteLength("Ë±°ÂΩ¢ËÆ∏ÊÖé‰Ω†Â•ΩÂêó", 7)).toEqual("Ë±°ÂΩ¢");
    expect(utils.limitToByteLength("Ë±°ÂΩ¢ËÆ∏ÊÖé‰Ω†Â•ΩÂêó", 8)).toEqual("Ë±°ÂΩ¢");
    expect(utils.limitToByteLength("Ë±°,ÂΩ¢,ËÆ∏ÊÖé‰Ω†Â•ΩÂêó", 7)).toEqual("Ë±°,ÂΩ¢");
    expect(utils.limitToByteLength("Ë±°,ÂΩ¢,ËÆ∏ÊÖé‰Ω†Â•ΩÂêó", 8)).toEqual("Ë±°,ÂΩ¢,");
  });

  it("Russian", () => {
    expect(utils.limitToByteLength("–ü—Ä–∏–≤–µ—Ç", 0)).toEqual("");
    expect(utils.limitToByteLength("–ü—Ä–∏–≤–µ—Ç", 1)).toEqual("");
    expect(utils.limitToByteLength("–ü—Ä–∏–≤–µ—Ç", 2)).toEqual("–ü");
    expect(utils.limitToByteLength("–î–æ —Å–≤–∏–¥–∞–Ω—å—è!", 5)).toEqual("–î–æ ");
    expect(utils.limitToByteLength("–î–æ —Å–≤–∏–¥–∞–Ω—å—è!", 6)).toEqual("–î–æ ");
  });
});
